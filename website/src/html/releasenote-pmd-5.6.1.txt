Fixed Issues

    General
        #1511: [core] Inconsistent behavior of Rule.start/Rule.end
        #234: [core] Zip file stream closes spuriously when loading rulesets
        #256: [core] shortnames option is broken with relative paths
        #305: [core] PMD not executing under git bash
        #324: [core] Automated release - github release notes missing
        #337: [core] Version 5.5.4 seems to hold file lock on rules JAR (affects Windows only)
    apex-apexunit
        #1543: [apex] ApexUnitTestClassShouldHaveAsserts assumes APEX is case sensitive
    apex-complexity
        #183: [apex] NCSS Method length is incorrect when using method chaining
        #251: [apex] NCSS Type length is incorrect when using method chaining
    apex-security
        #264: [apex] ApexXSSFromURLParamRule shouldn’t enforce ESAPI usage. String.escapeHtml4 is sufficient.
        #315: [apex] Documentation flaw on Apex Sharing Violations
    java
        #185: [java] CPD runs into NPE when analyzing Lucene
        #206: [java] Parse error on annotation fields with generics
        #207: [java] Parse error on method reference with generics
        #208: [java] Parse error with local class with 2 or more annotations
        #213: [java] CPD: OutOfMemory when analyzing Lucene
        #309: [java] Parse error on method reference
        #1542: [java] CPD throws an NPE when parsing enums with -ignore-identifiers
        #1545: [java] Symbol Table fails to resolve inner classes
    java-basic
        #232: [java] SimplifiedTernary: Incorrect ternary operation can be simplified.
    java-coupling
        #270: [java] LoD false positive
    java-design
        #933: [java] UnnecessaryLocalBeforeReturn false positive for SuppressWarnings annotation
        #1448: [java] ImmutableField: Private field in inner class gives false positive with lambdas
        #1495: [java] UnnecessaryLocalBeforeReturn with assert
        #1496: [java] New Rule: AccesorMethodGeneration - complements accessor class rule
        #1512: [java] Combine rules AvoidConstantsInInterface and ConstantsInInterface
        #1552: [java] MissingBreakInSwitch - False positive for continue
        #1556: [java] UseLocaleWithCaseConversions does not works with ResultSet (false negative)
        #177: [java] SingularField with lambdas as final fields
        #216: [java] [doc] NonThreadSafeSingleton: Be more explicit as to why double checked locking is not recommended
        #219: [java] UnnecessaryLocalBeforeReturn: ClassCastException in switch case with local variable returned
        #240: [java] UnnecessaryLocalBeforeReturn: Enhance by checking usages
        #274: [java] AccessorMethodGeneration: Method inside static inner class incorrectly reported
        #275: [java] FinalFieldCouldBeStatic: Constant in @interface incorrectly reported as “could be made static”
        #282: [java] UnnecessaryLocalBeforeReturn false positive when cloning Maps
        #291: [java] Improve quality of AccessorClassGeneration
        #310: [java] UnnecessaryLocalBeforeReturn enhancement is overly restrictive – method order matters
        #352: [java] AccessorClassGeneration throws ClassCastException when seeing array construction
    java-imports
        #338: [java] False positive on DontImportJavaLang when importing java.lang.ProcessBuilder
        #339: [java] False positive on DontImportJavaLang when importing Java 7’s java.lang.invoke.MethodHandles
        #1546: [java] UnnecessaryFullyQualifiedNameRule doesn’t take into consideration conflict resolution
        #1547: [java] UnusedImportRule - False Positive for only usage in Javadoc - {@link ClassName#CONSTANT}
        #1555: [java] UnnecessaryFullyQualifiedName: Really necessary fully qualified name
    java-junit
        #285: [java] JUnitTestsShouldIncludeAssertRule should support @Rule as well as @Test(expected = …)
        #330: [java] NPE applying rule JUnitTestsShouldIncludeAssert
    java-logging-java
        #1541: [java] InvalidSlf4jMessageFormat: False positive with placeholder and exception
        #1551: [java] InvalidSlf4jMessageFormat: fails with NPE
    java-optimizations
        #215: [java] RedundantFieldInitializer report for annotation field not explicitly marked as final
        #222: [java] UseStringBufferForStringAppends: False Positive with ternary operator
    java-strings
        #202: [java] [doc] ConsecutiveAppendsShouldReuse is not really an optimization
        #290: [java] InefficientEmptyStringCheck misses String.trim().isEmpty()
    java-unnecessary
        #199: [java] UselessParentheses: Parentheses in return statement are incorrectly reported as useless
    java-unusedcode
        #246: [java] UnusedModifier doesn’t check annotations
        #247: [java] UnusedModifier doesn’t check annotations inner classes
        #248: [java] UnusedModifier doesn’t check static keyword on nested enum declaration
        #257: [java] UnusedLocalVariable false positive
    XML
        #1518: [xml] Error while processing xml file with “.webapp” in the file or directory name
    psql
        #1549: [plsql] Parse error for IS [NOT] NULL construct
    javascript
        #201: [javascript] template strings are not correctly parsed

API Changes

    net.sourceforge.pmd.RuleSetFactory is now immutable and its behavior cannot be changed anymore. It provides constructors to create new adjusted instances. This allows to avoid synchronization in RuleSetFactory. See PR #131.
    net.sourceforge.pmd.RuleSet is now immutable, too, and can only be created via RuleSetFactory. See PR #145.
    net.sourceforge.pmd.cli.XPathCLI has been removed. It’s functionality is fully covered by the Designer.
    net.sourceforge.pmd.Report now works with ThreadSafeReportListeners. Both ReportListener and SynchronizedReportListener are deprecated in favor of net.sourceforge.pmd.ThreadSafeReportListener. Therefore, the methods getSynchronizedListeners() and addSynchronizedListeners(...) have been replaced by getListeners() and addListeners(...). See PR #193.

External Contributions

    #123: [apex] Changing method names to lowercase so casing doesn’t matter
    #129: [plsql] Added correct parse of IS [NOT] NULL and multiline DML
    #137: [apex] Adjusted remediation points
    #146: [apex] Detection of missing Apex CRUD checks for SOQL/DML operations
    #147: [apex] Adding XSS detection to return statements
    #148: [apex] Improving detection of SOQL injection
    #149: [apex] Whitelisting String.isEmpty and casting
    #152: [java] fixes #1552 continue does not require break
    #154: [java] Fix #1547: UnusedImports: Adjust regex to support underscores
    #158: [apex] Reducing FPs in SOQL with VF getter methods
    #160: [apex] Flagging of dangerous method call
    #163: [apex] Flagging of System.debug
    #165: [apex] Improving open redirect rule to avoid test classes/methods
    #167: [apex] GC and thread safety changes
    #169: [apex] Improving detection for DML with inline new object
    #170: [core] Ant Task Formatter encoding issue with XMLRenderer
    #172: [apex] Bug fix, detects both Apex fields and class members
    #175: [apex] ApexXSSFromURLParam: Adding missing casting methods
    #176: [apex] Bug fix for FP: open redirect for strings prefixed with / is safe
    #179: [apex] Legacy test class declaration support
    #181: [apex] Control flow based CRUD rule checking
    #184: [apex] Improving open redirect detection for static fields & assignment operations
    #189: [apex] Bug fix of SOQL concatenated vars detection
    #191: [apex] Detection of sharing violation when Database. methods are used
    #192: [apex] Dead code removal
    #200: [javascript] Templatestring grammar fix
    #204: [apex] Sharing violation SOQL detection bug fix
    #214: [apex] Sharing violation improving reporting of the correct node, de-duping
    #217: [core] Make it build on Windows
    #227: [apex] Improving detection of getters
    #228: [apex] Excluding count from CRUD/FLS checks
    #229: [apex] Dynamic SOQL is safe against Integer, Boolean, Double
    #231: [apex] CRUD/FLS rule - add support for fields
    #266: [java] corrected invalid reporting of LoD violation
    #268: [apex] Support safe escaping via String method
    #273: [apex] Shade jackson on apex
    #279: [vf] New Salesforce VisualForce language support
    #280: [apex] Support for Aggregate Result in CRUD rules
    #281: [apex] Add Braces Rule Set
    #283: [vf] CSRF in VF controller pages
    #284: [vf] Adding support for parsing EL in script tags
    #288: [vf] Setting the tab size to 4 for VF
    #289: [apex] Complex SOQL Crud check bug fixes
    #296: [apex] Adding String.IsNotBlank to the whitelist to prevent False positives
    #297: [core] CPD: Adding the –filelist option from pmd to cpd
    #303: [java] InefficientEmptyStringCheckRule now reports String.trim().isEmpty()
    #307: [java] Fix false positive with UseStringBufferForStringAppendsRule
    #308: [java] JUnitTestsShouldIncludeAssertRule supports @Rule annotated ExpectedExceptions
    #313: [vf] Apex:iFrame not being detected - bug fix
    #314: [vf] Bug fixes for incorrect Id detection and escaping
    #316: [apex] Ignoring certain rules in Batch classes, Queueable, and install scripts
    #317: [apex] Add support for safe ID assignment from URL param
    #326: [vf] Quote detection improvement and method argument detection
    #327: [apex] Fixed SOQL injection detection for escaped vars
    #331: [java] JunitTestsShouldIncludeAssertRule now handles AllocationExpression correctly
    #332: [java] Future-proof DontImportJavaLangRule
    #340: [vf] Multiple parser bug fixes
    #341: [vf] JSON.parse(..) and NOT(..) are safely evaluated
    #343: [apex] int,id,boolean,ternary operator condition are not injection in Soql
    #344: [apex] ApexCRUDViolationRule: Bug fix for ClassCastException
    #351: [vf] Fixing regression introduced by #341

